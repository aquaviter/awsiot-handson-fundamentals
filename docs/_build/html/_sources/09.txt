==========================
AWS IoT Device SDK解説
==========================

本ハンズオンで利用したサンプルコードを元に、AWS IoT Device SDKの解説をします。

シナリオ1の解説
===============

シナリオ1ではTopic(edison/illuminance)向けに照度センサーのデータをMQTTを利用してPublishします。



シナリオ2の解説
=============================

シナリオ2ではShadowのdeltaトピックに対しSubscribeおよびupdateトピックに対しPublishを行っています。

まず、証明書のパスを指定し、プライベート鍵、証明書、ルート証明書のパスを指定します。

.. code-block:: javascript
  :linenos:   

     var thingShadows = awsIot.thingShadow({
       keyPath: '/home/root/.node_app_slot/certs/privatekey.pem',
       certPath: '/home/root/.node_app_slot/certs/cert.pem',
       caPath: '/home/root/.node_app_slot/certs/rootca.crt',
       clientId: 'edison_shadow_client',
       region: 'ap-northeast-1'
    });


メッセージブローカに接続します。


.. code-block:: javascript
  :linenos:   

    thingShadows
     .on('connect', function() {
       console.log('connected to awsiot.');
       thingShadows.register('edison');
       clientTokenUpdate = thingShadows.update('edison', defaultState);
     });


ステータスを監視します。

.. code-block:: javascript
  :linenos:   
     
     thingShadows
     .on('status', function(thingName, stat, clientToken, stateObject) {
       console.log('received ' + stat + ' on ' + thingName + ': ' + JSON.stringify(stateObject));
     });

アプリケーションからdesiredステータスのアップデートがあった場合、deltaのトピックにメッセージがpublishされます。deltaをsubscribeすることで変更をリアルタイムに受信します。

.. code-block:: javascript
  :linenos:   
     
     thingShadows
     .on('delta', function(thingName, stateObject) {
       console.log('received delta '+' on ' + thingName + ': ' + JSON.stringify(stateObject));
       updatedState = {"state":{"reported":{"led": ""}}};
     });

     
ステータスをチェックし、デバイス内でそれぞれのステータスに応じた処理を実行します。
     
.. code-block:: javascript
  :linenos:   

     if (stateObject.state.led == 'on') {

     //ONの処理(LED点灯)
     
     } else {

     //OFFの処理(LED消灯)
     
     }
